;;;; Defines the different opcodes that the pickle protocol recognizes
(in-package #:unpython)

(defgeneric perform-op (op-code stream)
  (:documentation "Reads a pickle op-code and performs some operation"))

(defmethod perform-op (op-code stream)
  (declare (ignore stream))
  (format t "Not implemented: ~x~%" op-code))

(defmacro defop (name code)
  `(progn
     (defvar ,name ,(if (typep code 'character)
                        `(char-code ,code)
                        `,code))))

(defmacro do-for (op (&optional stream) &body body)
  (let ((op-code (gensym))
        (s (if stream
               stream
               (gensym))))
    `(defmethod perform-op ((,op-code (eql ,op)) ,s)
       ,(unless stream
          `(declare (ignore ,s)))
       ,@body)))

(defop +mark+            #\()
(defop +stop+            #\.)
(defop +pop+             #\0)
(defop +pop-mark+        #\1)
(defop +dup+             #\2)
(defop +float+           #\F)
(defop +int+             #\I)
(defop +binint+          #\J)
(defop +binint1+         #\K)
(defop +long+            #\L)
(defop +binint2+         #\M)
(defop +none+            #\N)
(defop +persid+          #\P)
(defop +binpersid+       #\Q)
(defop +reduce+          #\R)
(defop +string+          #\S)
(defop +binstring+       #\T)
(defop +short-binstring+ #\U)
(defop +unicode+         #\V)
(defop +binunicode+      #\X)
(defop +append+          #\a)
(defop +build+           #\b)
(defop +global+          #\c)
(defop +dict+            #\d)
(defop +empty-dict+      #\})
(defop +appends+         #\e)
(defop +get+             #\g)
(defop +binget+          #\h)
(defop +inst+            #\i)
(defop +long-binget+     #\j)
(defop +list+            #\l)
(defop +empty-list+      #\])
(defop +obj+             #\o)
(defop +put+             #\p)
(defop +binput+          #\q)
(defop +long-binput+     #\r)
(defop +setitem+         #\s)
(defop +tuple+           #\t)
(defop +empty-tuple+     #\))
(defop +setitems+        #\u)
(defop +binfloat+        #\G)

;;;; Not really opcodes; see +int+ docs
(defop +true+  (+ (char-code #\I) 0 (char-code #\newline)))
(defop +false+ (+ (char-code #\I) 1 (char-code #\newline)))

;;;; Protocol 2
(defop +proto+    #x80)
(defop +newobj+   #x81)
(defop +ext1+     #x82)
(defop +ext2+     #x83)
(defop +ext4+     #x84)
(defop +tuple1+   #x85)
(defop +tuple2+   #x86)
(defop +tuple3+   #x87)
(defop +newtrue+  #x88)
(defop +newfalse+ #x89)
(defop +long1+    #x8a)
(defop +long2+    #x8b)

;;;; Protocol 3
(defop +binbytes+       #\B)
(defop +short-binbytes+ #\C)

;;;; Protocol 4
(defop +short-binunicode+ #x8c)
(defop +binunicode8+      #x8d)
(defop +binbytes8+        #x8e)
(defop +empty-set+        #x8f)
(defop +additems+         #x90)
(defop +frozenset+        #x91)
(defop +newobj_ex+        #x92)
(defop +stack-global+     #x93)
(defop +memoize+          #x94)
(defop +frame+            #x95)
